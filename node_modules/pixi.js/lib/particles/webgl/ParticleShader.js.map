{"version":3,"sources":["../../../src/particles/webgl/ParticleShader.js"],"names":["ParticleShader","gl","join"],"mappings":";;;;AAAA;;;;;;;;;;;;AAEA;;;;;IAKqBA,c;;;AAEjB;;;AAGA,4BAAYC,EAAZ,EACA;AAAA;;AAAA,gDACI,mBACIA,EADJ;AAEI;AACA,SACI,iCADJ,EAEI,+BAFJ,EAGI,wBAHJ,EAKI,gCALJ,EAMI,wBANJ,EAOI,4BAPJ,EASI,gCATJ,EAUI,sBAVJ,EAYI,6BAZJ,EAaI,sBAbJ,EAeI,kBAfJ,EAgBI,2FAhBJ,EAiBI,2FAjBJ,EAmBI,yBAnBJ,EAoBI,4BApBJ,EAsBI,wEAtBJ,EAwBI,mCAxBJ,EAyBI,8BAzBJ,EA0BI,GA1BJ,EA2BEC,IA3BF,CA2BO,IA3BP,CAHJ;AA+BI;AACA,SACI,6BADJ,EAEI,sBAFJ,EAII,6BAJJ,EAMI,kBANJ,EAOI,6DAPJ,EAQI,yBARJ,EASI,GATJ,EAUEA,IAVF,CAUO,IAVP,CAhCJ,CADJ;AA6CC;;;;;kBAnDgBF,c","file":"ParticleShader.js","sourcesContent":["import Shader from '../../core/Shader';\n\n/**\n * @class\n * @extends PIXI.Shader\n * @memberof PIXI\n */\nexport default class ParticleShader extends Shader\n{\n    /**\n     * @param {PIXI.Shader} gl - The webgl shader manager this shader works for.\n     */\n    constructor(gl)\n    {\n        super(\n            gl,\n            // vertex shader\n            [\n                'attribute vec2 aVertexPosition;',\n                'attribute vec2 aTextureCoord;',\n                'attribute vec4 aColor;',\n\n                'attribute vec2 aPositionCoord;',\n                'attribute vec2 aScale;',\n                'attribute float aRotation;',\n\n                'uniform mat3 projectionMatrix;',\n                'uniform vec4 uColor;',\n\n                'varying vec2 vTextureCoord;',\n                'varying vec4 vColor;',\n\n                'void main(void){',\n                '   float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);',\n                '   float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);',\n\n                '   vec2 v = vec2(x, y);',\n                '   v = v + aPositionCoord;',\n\n                '   gl_Position = vec4((projectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);',\n\n                '   vTextureCoord = aTextureCoord;',\n                '   vColor = aColor * uColor;',\n                '}',\n            ].join('\\n'),\n            // hello\n            [\n                'varying vec2 vTextureCoord;',\n                'varying vec4 vColor;',\n\n                'uniform sampler2D uSampler;',\n\n                'void main(void){',\n                '  vec4 color = texture2D(uSampler, vTextureCoord) * vColor;',\n                '  gl_FragColor = color;',\n                '}',\n            ].join('\\n')\n        );\n    }\n}\n"]}